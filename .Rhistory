datasets
datasets()
data()
cars()
cars
devtools::install()
devtools::document()
?rScaledInvChi2
draws = rScaledInvChi2(n = 10000, v = 5, tau2 = 10)
mean(draws)
?BayesLinReg
devtools::document()
?BayesLinReg
devtools::document()
?BayesLinReg
devtools::document()
?BayesLinReg
devtools::document()
?BayesLinReg
devtools::install()
library(bayeslearn)
cars
X = cbind(1,cars$speed)
y = cars$speed
mu_0 = c(0,0)
Omega_0 = 0.1*diag(2)
Omega_0
v_0 = 5
sigma2_0
lm(dist ~ speed, data = cars)
res = lm(dist ~ speed, data = cars)
summary(res)
sigma2_0 = 10
postRes = BayesLinReg(y, X, mu_0, Omega_0, v_0, sigma2_0, nIter)
nIter =
1000
postRes = BayesLinReg(y, X, mu_0, Omega_0, v_0, sigma2_0, nIter)
devtools::install()
library(bayeslearn)
postRes = BayesLinReg(y, X, mu_0, Omega_0, v_0, sigma2_0, nIter)
library(mvtnorm)
devtools::install()
library(bayeslearn)
postRes = BayesLinReg(y, X, mu_0, Omega_0, v_0, sigma2_0, nIter)
mu_0 = c(0,0); Omega_0 = 0.1*diag(2)
postRes = BayesLinReg(y, X, mu_0, Omega_0, v_0, sigma2_0, nIter)
hist(postRes$sigma2Sample, main = "Posterior noise variance")
hist(postRes$betaSample[,1], main = "Posterior intercept")
hist(postRes$betaSample[,1], nbins = 30, main = "Posterior intercept")
hist(postRes$betaSample[,1], bins = 30, main = "Posterior intercept")
?bins
?hist
hist(postRes$betaSample[,1], breaks = 30, main = "Posterior intercept")
hist(postRes$sigma2Sample, breaks = 30, main = "Posterior noise variance")
hist(postRes$betaSample[,2], breaks = 30, main = "Posterior slope")
hist(postRes$betaSample[,2], breaks = 30, main = paste("Posterior",expression(beta_1))
)
hist(postRes$betaSample[,2], breaks = 30, main = paste("Posterior",expression(beta_1)))
hist(postRes$betaSample[,2], breaks = 30, main = paste("Posterior", expression(beta)))
hist(postRes$betaSample[,2], breaks = 30, main = paste("Posterior", expression(\beta)))
hist(postRes$betaSample[,2], breaks = 30, main = expression(paste("Posterior",beta_1))
)
hist(postRes$betaSample[,2], breaks = 30, main = expression(paste("Posterior", beta_1)))
hist(postRes$betaSample[,2], breaks = 30, main = expression(paste("Posterior", beta)))
hist(postRes$betaSample[,2], breaks = 30, main = expression(paste("Posterior ", beta[1])))
hist(postRes$sigma2Sample, breaks = 30, main = expression(paste("Posterior ", sigma^2)))
hist(postRes$sigma2Sample, breaks = 30, main = expression(paste("Posterior ", sigma^2)), xlab = "")
hist(postRes$sigma2Sample, breaks = 30, main = expression(paste("Posterior ", sigma^2)), xlab = "")
hist(postRes$betaSample[,1], breaks = 30, main = expression(paste("Posterior ", beta[0])), xlab = "")
hist(postRes$betaSample[,2], breaks = 30, main = expression(paste("Posterior ", beta[1])), xlab = "")
devtools::install()
devtools::document()
devtools::install()
devtools::document()
library(bayeslearn)
draws = rDirichlet(n = 1000, alpha = c(3,5,10))
devtools::build()
devtools::install()
remove.packages("bayeslearn")
devtools::install()
remove.packages("bayeslearn")
devtools::install()
devtools::install(force = TRUE)
devtools::document()
devtools::install(force = TRUE)
devtools::install()
library(bayeslearn)
devtools::document()
?rDirichlet
rDirichlet(n = 1000, alpha = c(3,5,10))
rDirichlet(n = 1000)
devtools::install()
devtools::document()
library(bayeslearn)
rDirichlet(n = 1000, alpha = c(3,5,10))
?rDirichlert
?rDirichlet
devtools::install()
devtools::document()
?rDirichlet
rDirichlet(n = 1000, alpha = c(3,5,10))
colMeans(draws)
draws = rDirichlet(n = 1000, alpha = c(3,5,10))
colMeans(draws)
c(3,5,10)/18
devtools::install()
?rDirichlet
devtools::document()
?rDirichlet
titanic
data()
Titantic
Titanic
?Titanic
Titanic[,,,1]
Titanic[,,1,1]
Titanic[,1,1,1]
esoph
stack.loss
usethis::use_package("jvamisc")
usethis::use_package("SUdatasets")
devtools::install()
devtools::document()
devtools::install()
devtools::document()
?bike
?Titanic
?titanic
y = titanic$survived
Titanic
SUdatasets::titanic$survived
SUdatasets::titanic
SUdatasets::titanicX = cbind(1, SUdatasets::titanic$age, SUdatasets::titanic$sex, SUdatasets::titanic$firstclass)
X = cbind(1, SUdatasets::titanic$age, SUdatasets::titanic$sex, SUdatasets::titanic$firstclass)
X
as.numeric(X)
SUdatasets::titanic$age
SUdatasets::titanic$sex
SX = cbind(1, SUdatasets::titanic$age)Udatasets::titanic$sex
X = cbind(1, SUdatasets::titanic$age)
X
y = SUdatasets::titanic$survived
y
logPostLogisticReg(c(0,1), y, X, tau = 10)
devtools::install()
.Last.error.trace
devtools::install()
devtools::document()
devtools::document()
?logPostLogisticReg
library(bayeslearn)
y = SUdatasets::titanic$survived
X = cbind(1, SUdatasets::titanic$age)
logPostLogisticReg(c(0,1), y, X, tau = 10)
devtools::install()
devtools::document()
logPostLogisticReg(c(0,1), y, X, tau = 10)
logPostLogisticReg(c(0,0.1), y, X, tau = 10)
X
initVal = as.vector(solve(crossprod(X,X))%*%t(X)%*%y) # OLS as initial values
initVal
nPara = dim(X)[2]
optRes = optim(initVal, logPostLogisticReg, gr=NULL, y, X, tau, method=c("BFGS"),
control=list(fnscale=-1), hessian=TRUE)
tau = 10
initVal = as.vector(solve(crossprod(X,X))%*%t(X)%*%y) # OLS as initial values
nPara = dim(X)[2]
optRes = optim(initVal, logPostLogisticReg, gr=NULL, y, X, tau, method=c("BFGS"),
control=list(fnscale=-1), hessian=TRUE)
?dmvnorm
rmvnorm(n = 100, mean = postMode, sigma = postCov)
rmvnorm
library(mvtnorm)
rmvnorm(n = 100, mean = postMode, sigma = postCov)
postMode =  optRes$par
postCov = -solve(optRes$hessian) # Approx posterior covariance matrix
rmvnorm(n = 100, mean = postMode, sigma = postCov)
hist(betaPostDraws[,1], breaks = 30, main = expression(paste("Posterior ", beta[0])), xlab = "")
betaPostDraws
betaPostDraws = rmvnorm(n = 100, mean = postMode, sigma = postCov)
hist(betaPostDraws[,1], breaks = 30, main = expression(paste("Posterior ", beta[0])), xlab = "")
hist(betaPostDraws[,2], breaks = 30, main = expression(paste("Posterior ", beta[1])), xlab = "")
betaPostDraws = rmvnorm(n = 1000, mean = postMode, sigma = postCov)
hist(betaPostDraws[,1], breaks = 30, main = expression(paste("Posterior ", beta[0])), xlab = "")
hist(betaPostDraws[,2], breaks = 30, main = expression(paste("Posterior ", beta[1])), xlab = "")
hist(betaPostDraws[,1], breaks = 30, main = expression(paste("Posterior ", beta[0])), xlab = "")
betaPostDraws = rmvnorm(n = 5000, mean = postMode, sigma = postCov)
hist(betaPostDraws[,1], breaks = 30, main = expression(paste("Posterior ", beta[0])), xlab = "")
hist(betaPostDraws[,2], breaks = 30, main = expression(paste("Posterior ", beta[1])), xlab = "")
initVal
?logPostLogisticRg
?logPostLogisticReg
diag(2)
devtools::install()
devtools::document()
devtools::install()
devtools::document()
?logPostLogisticReg
y = SUdatasets::titanic$survived
X = cbind(1, SUdatasets::titanic$age)
logPostLogisticReg(c(0,1), y, X, mu = c(0,0), Sigma = 10^2*diag(2))
y = SUdatasets::titanic$survived
X = cbind(1, SUdatasets::titanic$age)
logPostProbitReg(c(0,1), y, X, mu = c(0,0), Sigma = 10^2*diag(2))
devtools::document()
devtools::install()
y = SUdatasets::titanic$survived
X = cbind(1, SUdatasets::titanic$age)
logPostProbitReg(c(0,1), y, X, mu = c(0,0), Sigma = 10^2*diag(2))
# Loading titanic data from SUdatasets
y = SUdatasets::titanic$survived
X = cbind(1, SUdatasets::titanic$age)
# Setting prior
mu = c(0,0) # Prior is beta ~ N(0, tau2*I)
Sigma = 10^2*diag(2)
# Optimization to find mode and Hessian
InitVal = as.vector(solve(crossprod(X,X))%*%t(X)%*%y) # naive OLS as initial values
nPara = dim(X)[2]
optRes = optim(initVal, logPostLogisticReg, gr=NULL, y, X, mu, Sigma, method=c("BFGS"),
control=list(fnscale=-1), hessian=TRUE)
# Optimization to find mode and Hessian
initVal = as.vector(solve(crossprod(X,X))%*%t(X)%*%y) # naive OLS as initial values
nPara = dim(X)[2]
optRes = optim(initVal, logPostLogisticReg, gr=NULL, y, X, mu, Sigma, method=c("BFGS"),
control=list(fnscale=-1), hessian=TRUE)
postMode =  optRes$par # Posterior mode
postCov = -solve(optRes$hessian) # Approx posterior covariance matrix
# Sampling from normal posterior approximation and plotting histograms.
betaPostDraws = mvtnorm::rmvnorm(n = 5000, mean = postMode, sigma = postCov) # Draws from posterior
hist(betaPostDraws[,1], breaks = 30, main = expression(paste("Posterior ", beta[0])), xlab = "")
hist(betaPostDraws[,2], breaks = 30, main = expression(paste("Posterior ", beta[1])), xlab = "")
par(mfrow = c(1,2))
hist(betaPostDraws[,1], breaks = 30, main = expression(paste("Posterior ", beta[0])), xlab = "")
hist(betaPostDraws[,2], breaks = 30, main = expression(paste("Posterior ", beta[1])), xlab = "")
# Loading titanic data from SUdatasets
y = SUdatasets::titanic$survived
X = cbind(1, SUdatasets::titanic$age)
# Setting prior
mu = c(0,0) # Prior is beta ~ N(0, tau2*I)
Sigma = 10^2*diag(2)
# Optimization to find mode and Hessian
initVal = as.vector(solve(crossprod(X,X))%*%t(X)%*%y) # naive OLS as initial values
nPara = dim(X)[2]
optRes = optim(initVal, logPostProbitReg, gr=NULL, y, X, mu, Sigma, method=c("BFGS"),
control=list(fnscale=-1), hessian=TRUE)
postMode =  optRes$par # Posterior mode
postCov = -solve(optRes$hessian) # Approx posterior covariance matrix
# Sampling from normal posterior approximation and plotting histograms.
betaPostDraws = mvtnorm::rmvnorm(n = 5000, mean = postMode, sigma = postCov) # Draws from posterior
par(mfrow = c(1,2))
hist(betaPostDraws[,1], breaks = 30, main = expression(paste("Posterior ", beta[0])), xlab = "")
hist(betaPostDraws[,2], breaks = 30, main = expression(paste("Posterior ", beta[1])), xlab = "")
library(regkurs)
?regsimulate
library(bayeslearn)
library(SUdatasets)
# Loading titanic data from SUdatasets
y = SUdatasets::titanic$survived
X = cbind(1, SUdatasets::titanic$age)
# Setting prior
mu = c(0,0) # Prior is beta ~ N(0, tau2*I)
Sigma = 10^2*diag(2)
# Optimization to find mode and Hessian
initVal = as.vector(solve(crossprod(X,X))%*%t(X)%*%y) # naive OLS as initial values
nPara = dim(X)[2]
optRes = optim(initVal, logPostLogisticReg, gr=NULL, y, X, mu, Sigma, method=c("BFGS"),
control=list(fnscale=-1), hessian=TRUE)
postMode =  optRes$par # Posterior mode
postCov = -solve(optRes$hessian) # Approx posterior covariance matrix
# Sampling from normal posterior approximation and plotting histograms.
betaPostDraws = mvtnorm::rmvnorm(n = 5000, mean = postMode, sigma = postCov) # Draws from posterior
par(mfrow = c(1,2))
hist(betaPostDraws[,1], breaks = 30, main = expression(paste("Posterior ", beta[0])), xlab = "")
hist(betaPostDraws[,2], breaks = 30, main = expression(paste("Posterior ", beta[1])), xlab = "")
# install.packages("mvtnorm")
# install.packages("RColorBrewer")
library(mvtnorm) # package with multivariate normal density
library(RColorBrewer) # just some fancy colors for plotting
prettyCol = brewer.pal(10,"Paired")
chooseCov <- c(1:16) # covariates to include in the model
tau <- 10;           # Prior std beta~N(0,tau^2*I)
Data<-read.table("https://raw.githubusercontent.com/mattiasvillani/BayesLearnCourse/master/Notebooks/R/SpamReduced.dat",header=TRUE) # Reduced spambase data (http://archive.ics.uci.edu/ml/datasets/Spambase/)
covNames <- names(Data)[2:length(names(Data))]; # Read off the covariate names
y <- as.vector(Data[,1]);
X <- as.matrix(Data[,2:17]);
X <- X[,chooseCov];                             # Pick out the chosen covariates
covNames <- covNames[chooseCov];                # ... and their names
nPara <- dim(X)[2];
# Setting up the prior
mu <- as.vector(rep(0,nPara)) # Prior mean vector
Sigma <- tau^2*diag(nPara);
LogPostLogistic <- function(betaVect,y,X,mu,Sigma){
nPara <- length(betaVect);
linPred <- X%*%betaVect;
logLik <- sum( linPred*y -log(1 + exp(linPred)));
logPrior <- dmvnorm(betaVect, matrix(0,nPara,1), Sigma, log=TRUE);
return(logLik + logPrior)
}
initVal <- as.vector(rep(0,nPara));
OptimResults<-optim(initVal,LogPostLogistic,gr=NULL,y,X,mu,Sigma,
method=c("BFGS"), control=list(fnscale=-1),hessian=TRUE)
postMode = OptimResults$par
postCov = -solve(OptimResults$hessian) # inv(J) - Approx posterior covariance matrix
postStd <- sqrt(diag(postCov)) # Computing approximate stdev
names(postMode) <- covNames      # Naming the coefficient by covariates
names(postStd) <- covNames # Naming the coefficient by covariates
print(postMode)
print(postStd)
par(mfrow=c(1,2))
gridVals = seq(postMode['free']-3*postStd['free'], postMode['free']+3*postStd['free'],
length = 100)
plot(gridVals, dnorm(gridVals, mean = postMode['free'], sd = postStd['free']),
xlab = expression(beta), ylab= "posterior density", type ="l", bty = "n",
lwd = 2, col = prettyCol[2], main = expression(beta[free]))
gridVals = seq(postMode['hpl']-3*postStd['hpl'], postMode['hpl']+3*postStd['hpl'],
length = 100)
plot(gridVals, dnorm(gridVals, mean = postMode['hpl'], sd = postStd['hpl']),
xlab = expression(beta), ylab= "posterior density", type ="l", bty = "n",
lwd = 2, col = prettyCol[2], main = expression(beta[hpl]))
xStar = colMeans(X)
nSim = 1000
probSpam = rep(0,nSim)
spamPred = rep(0,nSim)
for (i in 1:nSim){
betaDraw = as.vector(rmvnorm(1, postMode, postCov)) # Simulate a beta draw from approx post
linPred = t(xStar)%*%betaDraw
probSpam[i] = exp(linPred)/(1+exp(linPred)) # draw from posterior of Pr(spam|x)
spamPred[i] = rbinom(n=1,size=1,probSpam[i]) # draw from model given probSpam[i]
}
par(mfrow=c(1,2))
hist(probSpam, freq = FALSE, xlab = expression(theta[i]), ylab= "", col = prettyCol[3],
main = "Posterior distribution for Pr(spam|x)", cex.main = 0.7)
barplot(c(sum(spamPred==0),sum(spamPred==1))/nSim, names.arg  = c("ham","spam"), col = prettyCol[7],
main = "Predictive distribution spam", cex.main = 0.7)
